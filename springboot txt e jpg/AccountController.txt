package account.account;

import main.java.account.model.Account;
import main.java.account.service.AccountService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/account")
public class AccountController {

    private final AccountService accountService;

    @Autowired
    public AccountController(AccountService accountService) {
        this.accountService = accountService;
    }

    // Endpoint para listar todas as contas
    @GetMapping("/list")
    public ResponseEntity<List<Account>> findAll() {
        List<Account> accounts = (List<Account>) accountService.getAllAccounts();
        return accounts.isEmpty() 
            ? ResponseEntity.noContent().build() 
            : ResponseEntity.ok(accounts);
    }

    // Endpoint para buscar a conta pelo idAccount
    @GetMapping("/{idAccount}")
    public ResponseEntity<Account> findById(@PathVariable String idAccount) {
        Optional<Account> account = accountService.getAccountByIdAccount(idAccount);
        return account.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // Endpoint para criar uma nova conta
    @PostMapping
    public ResponseEntity<Account> create(@RequestBody Account in) {
        Account createdAccount = accountService.createAccount(in);
        return ResponseEntity.status(201).body(createdAccount);
    }

    // Endpoint para deletar uma conta
    @DeleteMapping("/{idAccount}")
    public ResponseEntity<Void> delete(@PathVariable String idAccount) {
        Optional<Account> account = accountService.getAccountByIdAccount(idAccount);
        if (account.isPresent()) {
            accountService.deleteAccount(idAccount); // Chama o serviço para deletar
            return ResponseEntity.noContent().build(); // Retorna status 204 No Content
        } else {
            return ResponseEntity.notFound().build(); // Caso a conta não seja encontrada, retorna 404 Not Found
        
        }
    }
}
