<div class="container my-4">

    <div class="status-header">
        <div class="status-text">
            <h1>Status do Arduino</h1>
            <p><strong>Título:</strong> ""</p>
            <p><strong>Descrição curta:</strong> ""</p>
            <ul>
                <li><strong>Conexão:</strong> <span id="connection-status"></span></li>
                <li><strong>Sensores:</strong> <span id="sensor-status"></span></li>
            </ul>
        </div>
    </div>

    <div class="chart-container">
        <canvas id="emgChart" width="400" height="200"></canvas>
    </div>

    <div class="control-buttons">
        <button id="playButton" class="control-btn green">▶</button>
        <button id="pauseButton" class="control-btn yellow">⏸</button>
        <button id="stopButton" class="control-btn red">⏹</button>
    </div>
</div>

<style>
    .container {
        background-color: white;
        padding: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        width: 600px;
        text-align: center;
    }

    .status-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .arduino-icon {
        width: 80px;
        height: 80px;
    }

    .status-text {
        text-align: left;
    }

    .status-indicators {
        display: flex;
        gap: 10px;
    }

    .indicator {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        display: inline-block;
    }

    .chart-container {
        margin: 20px 0;
    }

    .control-buttons {
        display: flex;
        justify-content: center;
        gap: 15px;
    }

    .control-btn {
        width: 60px;
        height: 60px;
        font-size: 24px;
        border: none;
        border-radius: 50%;
        color: white;
        cursor: pointer;
    }

    .green {
        background-color: #000000;
    }

    .yellow {
        background-color: #000000;
    }

    .red {
        background-color: #000000;
    }
</style>

<script src="/public/js/jquery-validate/jquery.validate.min.js"></script>
<script src="/public/js/jquery-validate/additional-methods.min.js"></script>
<script src="/public/js/jquery-validate/localization/messages_pt_BR.min.js"></script>
<script type="text/javascript" src="/public/js/chart.js/chart.min.js"></script>

<script>
    const ctx = document.getElementById('emgChart').getContext('2d');

    const emgChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: Array.from({ length: 100 }, (_, i) => 100 - i),
            datasets: [{
                label: 'Sinal EMG (mV)',
                data: Array.from({ length: 100 }, () => 0),
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    display: true,
                    title: {
                        display: true,
                        text: 'Tempo (s)'
                    }
                },
                y: {
                    display: true,
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Amplitude EMG (mV)'
                    }
                }
            }
        }
    });

    let timeout = 0;
    async function updateEmgData() {
        try {
            let response = await fetch("/obterDadosDev");
            if (response.ok) {
                let lista = await response.json();
                if (!lista) {
                    lista = [];
                }
                while (lista.length < 100) {
                    lista.unshift(0);  
                }

                //emgChart.data.datasets[0].data.push(Math.random() * 100);
                //emgChart.data.datasets[0].data.shift();
                emgChart.data.datasets[0].data = lista;

                emgChart.update("none");
            }
        } catch (error) {
            console.error(error);
        }

        timeout = setTimeout(updateEmgData, 100);
    }

    function startEmgSimulation() {
        if (timeout) {
            return;
        }

        updateEmgData();
    }

    function pauseEmgSimulation() {
        if (timeout) {
            clearTimeout(timeout);
            timeout = 0;
        }
    }

    function stopEmgSimulation() {
        if (timeout) {
            clearTimeout(timeout);
            timeout = 0;
        }
        emgChart.data.datasets[0].data = Array.from({ length: 100 }, () => 0);
        emgChart.update("none");
    }

    document.getElementById('playButton').addEventListener('click', startEmgSimulation);
    document.getElementById('pauseButton').addEventListener('click', pauseEmgSimulation);
    document.getElementById('stopButton').addEventListener('click', stopEmgSimulation);

</script>
